@using BenDavisWebsite.Models
@rendermode InteractiveServer
@inject IExperienceService ExperienceService

<p>@Message</p>
<EditForm Model=@NewProject OnSubmit=@FormSubmittedAsync FormName="EntryForm">
	<div class="form-group">
		<label for="Name">Name</label>
		<InputText @bind-Value=NewProject!.Name class="form-control" id="Name" />
	</div>
	<div class="form-group">
		<label for="Description">Description</label>
		<InputText @bind-Value=NewProject!.Description class="form-control" id="Description" />
	</div>
	<div class="form-group">
		<label>Technologies:</label>
		<button type="button" @onclick="() => NewProject.Technologies.Add(string.Empty)">Add New</button>
		@for (int i=0; i< NewProject.Technologies.Count(); i++)
		{
			int elementIndex = i;
			<div>
				<InputText @bind-Value=NewProject.Technologies[elementIndex] placeholder="Enter Technology"/>
				<button type="button" @onclick="() => NewProject.Technologies.RemoveAt(elementIndex)">Remove</button>
			</div>
		}
	</div>
	<div class="form-group">
		<label>Skills:</label>
		<button type="button" @onclick="() => NewProject.Skills.Add(string.Empty)">Add New</button>
		@for (int i=0; i< NewProject.Skills.Count(); i++)
		{
			int elementIndex = i;
			<div>
				<InputText @bind-Value=NewProject.Skills[elementIndex] placeholder="Enter Skill"/>
				<button type="button" @onclick="() => NewProject.Skills.RemoveAt(elementIndex)">Remove</button>
			</div>
		}
	</div>
	<div class="form-group">
		<label>Links:</label>
		<button type="button" @onclick="() => NewProject.Links.Add(new())">Add New</button>
		@for (int i=0; i< NewProject.Links.Count(); i++)
		{
			int elementIndex = i;
			<div>
				<InputText @bind-Value=NewProject.Links[elementIndex].Text placeholder="Enter Link Text"/>
				<InputText @bind-Value=NewProject.Links[elementIndex].Url placeholder="Enter Link URL"/>
				<button type="button" @onclick="() => NewProject.Links.RemoveAt(elementIndex)">Remove</button>
			</div>
		}
	</div>
	<div class="form-group">
		<label>Experience Type:</label>
		<InputSelect @bind-Value="@NewProject.Type">
			@foreach (var value in Enum.GetValues<ExperienceType>())
			{
				<option value="@value">@value</option>
			}
		</InputSelect>
	</div>
	<div class="form-group">
		<label>Date Started: (Only Month Matters)</label>
		<InputDate TValue="DateTime" @bind-Value="@NewProject.Started"/>
	</div>
	<div class="form-group">
		<label>Date Finished: (Only Month Matters)</label>
		<InputDate TValue="DateTime" @bind-Value="@NewProject.Finished"/>
	</div>
	<div class="form-group">
		<label>Media Type:</label>
		<InputSelect @bind-Value="@NewProject.Media">
			@foreach (var value in Enum.GetValues<MediaType>())
			{
				<option value="@value">@value</option>
			}
		</InputSelect>
		<InputFile OnChange="UploadFiles"/>
	</div>
	<input type="submit" value="Submit" class="btn btn-primary" />
</EditForm>

@code {
	[SupplyParameterFromForm]
	Experience? NewProject { get; set; } = new();

	private IBrowserFile? inputFile;
	string? Message;

	async Task FormSubmittedAsync()
	{
		if (NewProject is not null)
		{
			Message = "Submitted";
			if (inputFile is not null)
			{
				using MemoryStream memoryStream = new MemoryStream();
				// Define the maximum file size allowed (2 GB)
				long maxFileSize = 2L * 1024L * 1024L * 1024L;
				await inputFile.OpenReadStream(maxAllowedSize: maxFileSize).CopyToAsync(memoryStream);
				await ExperienceService.AddExperience(NewProject, memoryStream);
			}
			else
			{
				await ExperienceService.AddExperience(NewProject);
			}
			NewProject = new();
		}
		else
		{
			Message = "No Project to Submit.";
		}
		StateHasChanged();
	}

	async Task UploadFiles(InputFileChangeEventArgs e)
	{
		NewProject!.MediaLink = e.File.Name;
		Message = "File Uploaded: " + NewProject!.MediaLink;
		inputFile = e.File;
	}

}
