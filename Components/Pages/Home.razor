@page "/"
@inject IJSRuntime JS
@inject IExperienceService ExperienceService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<HomeBar SearchItems=SearchItems AddSearchItem=AddSearchItem/>
@if (isLoading)
{
	<p>Loading...</p>
}
else
{
	<p style="text-align: end;padding-right:1em;">
		@(VisibleExperiences.Count() == Experiences.Count() ? "All Items" : VisibleExperiences.Count() + " Item(s).")
	</p>
	@for(int i=0;i<VisibleExperiences!.Count;i++)
	{
		@if(i % 2 == 0)
		{
			<ExperienceBar SearchItems=@SearchItems BackgroundClass="bg-white" Experience="@VisibleExperiences[i]"/>
		}
		else
		{
			<ExperienceBar BackgroundClass="bg-black" Experience="@VisibleExperiences[i]"/>
		}

	}
}

@code {
	List<Experience>? Experiences {get; set;}
	List<Experience>? VisibleExperiences { get; set; } = new();
	List<string> SearchItems { get; set; } = new();
	bool isLoading = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Experiences = await ExperienceService.GetExperienceList();
			VisibleExperiences = Experiences;
			isLoading = false;
			StateHasChanged();
			await JS.InvokeVoidAsync("setVideoAttributes");
		}
	}

	public void AddSearchItem(string item)
	{
		if (SearchItems.Contains(item))
		{
			SearchItems.Remove(item);
		} else
		{
			SearchItems.Add(item);
		}

		if (SearchItems != null && SearchItems.Count > 0)
		{
			VisibleExperiences = ExperienceService.SortExperienceList(Experiences, SearchItems);
		} else
		{
			VisibleExperiences = Experiences;
		}
		StateHasChanged();
	}
}


